rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isPremium() {
      return isAuthenticated() &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isPremium == true;
    }

    // Users collection - allow authenticated users to read/write their own data
    match /users/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId) &&
        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['isPremium', 'premiumExpiresAt']);
      allow delete: if isAuthenticated() && isOwner(userId);

      // User favorites subcollection
      match /favorites/{eventId} {
        allow read: if isAuthenticated() && isOwner(userId);
        allow write: if isAuthenticated() && isOwner(userId);
      }
    }

    // Events collection (public read, authenticated users can write for demo purposes)
    match /events/{eventId} {
      allow read: if true; // Public events
      allow write: if isAuthenticated(); // Allow authenticated users to create events
      allow update: if isAuthenticated(); // Allow authenticated users to update events
      allow delete: if isAuthenticated(); // Allow authenticated users to delete events
    }

    // Chat sessions - allow authenticated users to manage their own sessions
    match /chatSessions/{sessionId} {
      allow read: if isAuthenticated() &&
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() &&
        resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() &&
        resource.data.userId == request.auth.uid;

      // Messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated() &&
          get(/databases/$(database)/documents/chatSessions/$(sessionId)).data.userId == request.auth.uid;
        allow create: if isAuthenticated() &&
          request.resource.data.role == 'user' &&
          get(/databases/$(database)/documents/chatSessions/$(sessionId)).data.userId == request.auth.uid;
        allow update: if isAuthenticated() &&
          get(/databases/$(database)/documents/chatSessions/$(sessionId)).data.userId == request.auth.uid;
        allow delete: if isAuthenticated() &&
          get(/databases/$(database)/documents/chatSessions/$(sessionId)).data.userId == request.auth.uid;
      }
    }

    // Analytics (write-only for authenticated users)
    match /analytics/{document=**} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }

    // Cache collection (allow authenticated users for demo purposes)
    match /cache/{document=**} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }

    // Premium subscriptions
    match /subscriptions/{subscriptionId} {
      allow read: if isAuthenticated() &&
        resource.data.userId == request.auth.uid;
      allow write: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;
    }
  }
}